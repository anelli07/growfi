import SwiftUI

struct GoalCompletionView: View {
    let goal: Goal
    @ObservedObject var goalsVM: GoalsViewModel
    @State private var showConfetti = false
    var onDismiss: () -> Void
    
    var body: some View {
        ZStack {
            // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            Color.black.opacity(0.3)
                .ignoresSafeArea()
                .onTapGesture {
                    onDismiss()
                }
            
            // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            VStack(spacing: 20) {
                // –ò–∫–æ–Ω–∫–∞ —Ü–µ–ª–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                ZStack {
                    Circle()
                        .fill(Color(hex: goal.color))
                        .frame(width: 80, height: 80)
                        .scaleEffect(showConfetti ? 1.1 : 1.0)
                        .animation(.easeInOut(duration: 0.5).repeatForever(autoreverses: true), value: showConfetti)
                    
                    Image(systemName: goal.icon)
                        .font(.system(size: 35))
                        .foregroundColor(.white)
                }
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
                VStack(spacing: 8) {
                    Text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.primary)
                    
                    Text("–¶–µ–ª—å '\(goal.name)' –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
                        .font(.headline)
                        .fontWeight(.semibold)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
                
                // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏
                VStack(spacing: 8) {
                    HStack {
                        Text("–ù–∞–∫–æ–ø–ª–µ–Ω–æ:")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        Spacer()
                        Text("\(Int(goal.current_amount)) \(goal.currency)")
                            .font(.headline)
                            .fontWeight(.bold)
                            .foregroundColor(Color(hex: goal.color))
                    }
                    
                    HStack {
                        Text("–í—Ä–µ–º—è:")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        Spacer()
                        Text("\(daysBetween(from: goal.createdAt ?? Date(), to: Date())) –¥–Ω–µ–π")
                            .font(.subheadline)
                            .fontWeight(.semibold)
                    }
                    .onAppear {
                        print("DEBUG: GoalCompletionView - goal.createdAt: \(goal.createdAt?.description ?? "nil")")
                        print("DEBUG: GoalCompletionView - days calculated: \(daysBetween(from: goal.createdAt ?? Date(), to: Date()))")
                    }
                }
                .padding(.horizontal)
                
                // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                HStack(spacing: 12) {
                    Button(action: {
                        showConfetti = false
                        onDismiss()
                    }) {
                        HStack {
                            Image(systemName: "checkmark.circle.fill")
                            Text("–û—Å—Ç–∞–≤–∏—Ç—å")
                        }
                        .font(.subheadline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 10)
                        .background(Color.green)
                        .cornerRadius(8)
                    }
                    
                    Button(action: {
                        showConfetti = false
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                        if goal.id > 0 {
                            goalsVM.deleteGoal(goalId: goal.id)
                        }
                        onDismiss()
                    }) {
                        HStack {
                            Image(systemName: "trash.circle.fill")
                            Text("–£–¥–∞–ª–∏—Ç—å")
                        }
                        .font(.subheadline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 10)
                        .background(Color.red)
                        .cornerRadius(8)
                    }
                }
                .padding(.horizontal)
            }
            .padding(24)
            .background(Color.white)
            .cornerRadius(16)
            .shadow(radius: 10)
            .padding(.horizontal, 40)
            
            // –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ (–∞–Ω–∏–º–∞—Ü–∏—è)
            if showConfetti {
                ConfettiView(showConfetti: $showConfetti)
            }
        }
        .onAppear {
            showConfetti = true
        }
    }
    
    private func daysBetween(from startDate: Date, to endDate: Date) -> Int {
        let calendar = Calendar.current
        let components = calendar.dateComponents([.day], from: startDate, to: endDate)
        let days = components.day ?? 0
        
        // –ï—Å–ª–∏ —Ü–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1 –¥–µ–Ω—å
        if days == 0 && calendar.isDateInToday(startDate) {
            return 1
        }
        
        return max(1, days) // –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å–∞–ª—é—Ç–∞
struct ConfettiView: View {
    @Binding var showConfetti: Bool
    @State private var particles: [FireworkParticle] = []
    @State private var animationPhase: Int = 0
    
    var body: some View {
        ZStack {
            ForEach(particles) { particle in
                Circle()
                    .fill(particle.color)
                    .frame(width: particle.size, height: particle.size)
                    .position(particle.position)
                    .opacity(particle.opacity)
                    .scaleEffect(particle.scale)
            }
        }
        .onAppear {
            createFireworks()
        }
    }
    
    private func createFireworks() {
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —Å–∞–ª—é—Ç–æ–≤ —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω —ç–∫—Ä–∞–Ω–∞
        let screenWidth = UIScreen.main.bounds.width
        let screenHeight = UIScreen.main.bounds.height
        
        // –°–∞–ª—é—Ç—ã –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
        let fireworkPositions = [
            // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
            CGPoint(x: screenWidth * 0.1, y: screenHeight * 0.1),
            CGPoint(x: screenWidth * 0.3, y: screenHeight * 0.15),
            CGPoint(x: screenWidth * 0.5, y: screenHeight * 0.1),
            CGPoint(x: screenWidth * 0.7, y: screenHeight * 0.15),
            CGPoint(x: screenWidth * 0.9, y: screenHeight * 0.1),
            
            // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å
            CGPoint(x: screenWidth * 0.1, y: screenHeight * 0.9),
            CGPoint(x: screenWidth * 0.3, y: screenHeight * 0.85),
            CGPoint(x: screenWidth * 0.5, y: screenHeight * 0.9),
            CGPoint(x: screenWidth * 0.7, y: screenHeight * 0.85),
            CGPoint(x: screenWidth * 0.9, y: screenHeight * 0.9),
            
            // –õ–µ–≤–∞—è —á–∞—Å—Ç—å
            CGPoint(x: screenWidth * 0.1, y: screenHeight * 0.3),
            CGPoint(x: screenWidth * 0.1, y: screenHeight * 0.5),
            CGPoint(x: screenWidth * 0.1, y: screenHeight * 0.7),
            
            // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
            CGPoint(x: screenWidth * 0.9, y: screenHeight * 0.3),
            CGPoint(x: screenWidth * 0.9, y: screenHeight * 0.5),
            CGPoint(x: screenWidth * 0.9, y: screenHeight * 0.7),
            
            // –¶–µ–Ω—Ç—Ä
            CGPoint(x: screenWidth * 0.5, y: screenHeight * 0.5)
        ]
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Å–∞–ª—é—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        for position in fireworkPositions {
            createFirework(at: position)
        }
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∞–ª—é—Ç 2 —Ä–∞–∑–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.5) {
            if showConfetti {
                particles.removeAll()
                createFireworks()
            }
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∞–ª—é—Ç —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        DispatchQueue.main.asyncAfter(deadline: .now() + 8.0) {
            showConfetti = false
        }
    }
    
    private func createFirework(at position: CGPoint) {
        let colors: [Color] = [.red, .blue, .green, .yellow, .purple, .orange, .pink, .cyan, .mint, .indigo, .teal, .brown, .gray]
        
        // –°–æ–∑–¥–∞–µ–º 20-30 —á–∞—Å—Ç–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∞–ª—é—Ç–∞
        for _ in 0..<Int.random(in: 20...30) {
            let angle = Double.random(in: 0...2 * .pi)
            let distance = Double.random(in: 50...150)
            let endX = position.x + CGFloat(cos(angle) * distance)
            let endY = position.y + CGFloat(sin(angle) * distance)
            
            let particle = FireworkParticle(
                position: position,
                endPosition: CGPoint(x: endX, y: endY),
                color: colors.randomElement() ?? .blue,
                size: CGFloat.random(in: 3...8),
                opacity: 1.0,
                scale: 0.1
            )
            particles.append(particle)
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            withAnimation(.easeOut(duration: 2.0)) {
                for i in particles.indices {
                    if particles[i].position == position {
                        particles[i].position = particles[i].endPosition
                        particles[i].opacity = 0
                        particles[i].scale = 1.0
                    }
                }
            }
        }
    }
}

struct FireworkParticle: Identifiable {
    let id = UUID()
    var position: CGPoint
    let endPosition: CGPoint
    let color: Color
    let size: CGFloat
    var opacity: Double
    var scale: CGFloat
}



#Preview {
    GoalCompletionView(
        goal: Goal(
            id: 1,
            name: "–ú–∞—à–∏–Ω–∞",
            target_amount: 2000000,
            current_amount: 2000000,
            user_id: 1,
            icon: "car.fill",
            color: "#34c759",
            currency: "‚Ç∏",
            planPeriod: .month,
            planAmount: 100000,
            createdAt: Date().addingTimeInterval(-30*24*60*60), // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            reminderPeriod: "month",
            selectedWeekday: nil,
            selectedMonthDay: 1,
            selectedTime: "9:00 AM"
        ),
        goalsVM: GoalsViewModel(),
        onDismiss: {}
    )
} 