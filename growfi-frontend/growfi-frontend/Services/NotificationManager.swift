import Foundation
import UserNotifications
import SwiftUI

enum NotificationType: String, CaseIterable {
    case dailyReminder = "daily_reminder"
    case noActivity = "no_activity"
    case weeklySummary = "weekly_summary"
    case goalCompleted = "goal_completed"
    
    var title: String {
        switch self {
        case .dailyReminder: return "GrowFi –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç"
        case .noActivity: return "–°–∫—É—á–∞–µ–º –ø–æ —Ç–µ–±–µ"
        case .weeklySummary: return "–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"
        case .goalCompleted: return "üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
        }
    }
    
    var body: String {
        switch self {
        case .dailyReminder: return "–ù–µ –∑–∞–±—É–¥—å –≤–Ω–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã ‚Äî —è –∂–¥—É üìí"
        case .noActivity: return "–Ø —Å–∫—É—á–∞—é –ø–æ —Ç–≤–æ–∏–º —Ñ–∏–Ω–∞–Ω—Å–∞–º‚Ä¶ –≤–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å üò¢"
        case .weeklySummary: return "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ç—ã –≤—ã—Ä–æ—Å –∑–∞ –Ω–µ–¥–µ–ª—é üìä"
        case .goalCompleted: return "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üéä"
        }
    }
}

class NotificationManager: ObservableObject {
    static let shared = NotificationManager()
    
    @Published var isAuthorized = false
    
    var isSystemNotificationsEnabled: Bool {
        get { UserDefaults.standard.object(forKey: "isSystemNotificationsEnabled") as? Bool ?? true }
        set { UserDefaults.standard.set(newValue, forKey: "isSystemNotificationsEnabled") }
    }
    
    private init() {
        checkAuthorizationStatus()
    }
    
    func requestAuthorization() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            DispatchQueue.main.async {
                self.isAuthorized = granted
            }
        }
    }
    
    func checkAuthorizationStatus() {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                self.isAuthorized = settings.authorizationStatus == .authorized
            }
        }
    }
    
    // --- –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    // 1. Daily reminder (–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π)
    func scheduleDailyReminderIfNeeded(transactions: [Transaction]) {
        guard isSystemNotificationsEnabled else { return }
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        let hasToday = transactions.contains { calendar.isDate($0.date, inSameDayAs: today) }
        removeSystemNotification(type: .dailyReminder)
        guard !hasToday else { return }
        let content = UNMutableNotificationContent()
        content.title = NotificationType.dailyReminder.title
        content.body = NotificationType.dailyReminder.body
        content.sound = .default
        var dateComponents = DateComponents()
        dateComponents.hour = 20 // 20:00
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: NotificationType.dailyReminder.rawValue, content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    // 2. No activity (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π 7 –¥–Ω–µ–π)
    func scheduleNoActivityReminder(transactions: [Transaction]) {
        guard isSystemNotificationsEnabled else { return }
        let calendar = Calendar.current
        let weekAgo = calendar.date(byAdding: .day, value: -7, to: Date())!
        let hasRecent = transactions.contains { $0.date >= weekAgo }
        removeSystemNotification(type: .noActivity)
        guard !hasRecent else { return }
        let content = UNMutableNotificationContent()
        content.title = NotificationType.noActivity.title
        content.body = NotificationType.noActivity.body
        content.sound = .default
        var dateComponents = DateComponents()
        dateComponents.hour = 18 // 18:00
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)
        let request = UNNotificationRequest(identifier: NotificationType.noActivity.rawValue, content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    // 3. Weekly summary (–µ—Å–ª–∏ –±—ã–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é)
    func scheduleWeeklySummaryReminder(transactions: [Transaction]) {
        guard isSystemNotificationsEnabled else { return }
        let calendar = Calendar.current
        let weekAgo = calendar.date(byAdding: .day, value: -7, to: Date())!
        let hasWeekOps = transactions.contains { $0.date >= weekAgo }
        removeSystemNotification(type: .weeklySummary)
        guard hasWeekOps else { return }
        let content = UNMutableNotificationContent()
        content.title = NotificationType.weeklySummary.title
        content.body = NotificationType.weeklySummary.body
        content.sound = .default
        content.userInfo = ["openAnalytics": true]
        var dateComponents = DateComponents()
        dateComponents.weekday = 1 // Sunday
        dateComponents.hour = 15 // 15:00
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: NotificationType.weeklySummary.rawValue, content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func removeSystemNotification(type: NotificationType) {
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [type.rawValue])
    }
    
    // --- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ü–µ–ª—è–º ---
    func schedulePersonalGoalReminder(goal: Goal) {
        removePersonalGoalReminder(goalId: goal.id)
        guard let reminderPeriod = goal.reminderPeriod else { return } // –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º
        
        print("DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–∏ '\(goal.name)'")
        print("DEBUG: planPeriod = \(goal.planPeriod?.rawValue ?? "nil")")
        print("DEBUG: planAmount = \(goal.planAmount ?? -1)")
        print("DEBUG: createdAt = \(goal.createdAt?.description ?? "nil")")
        print("DEBUG: current_amount = \(goal.current_amount)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ
        if hasGoalBeenFundedThisPeriod(goal: goal) {
            print("DEBUG: –¶–µ–ª—å '\(goal.name)' —É–∂–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        let amount = Int(goal.planAmount ?? 0)
        if amount <= 0 {
            print("DEBUG: –¶–µ–ª—å '\(goal.name)' - —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —Ü–µ–ª—å –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ
        if hasGoalBeenFundedForAmount(goal: goal, requiredAmount: Double(amount)) {
            print("DEBUG: –¶–µ–ª—å '\(goal.name)' —É–∂–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        let remainingAmount = calculateRemainingAmount(goal: goal)
        if remainingAmount <= 0 {
            print("DEBUG: –¶–µ–ª—å '\(goal.name)' - –æ—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞ \(remainingAmount)‚Ç∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return
        }
        
        let content = UNMutableNotificationContent()
        content.title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ü–µ–ª–∏"
        content.body = "–ü–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å '\(goal.name)' –Ω–∞ \(remainingAmount)‚Ç∏!"
        content.sound = .default
        
        var dateComponents = DateComponents()
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        var selectedTime: Date? = nil
        if let timeString = goal.selectedTime {
            let formatter = DateFormatter()
            formatter.dateFormat = "HH:mm"
            selectedTime = formatter.date(from: timeString)
        }
        
        switch reminderPeriod {
        case "week":
            dateComponents.weekday = goal.selectedWeekday ?? 2
            if let selectedTime = selectedTime {
                dateComponents.hour = Calendar.current.component(.hour, from: selectedTime)
                dateComponents.minute = Calendar.current.component(.minute, from: selectedTime)
            } else {
                dateComponents.hour = 9
                dateComponents.minute = 0
            }
        case "month":
            dateComponents.day = goal.selectedMonthDay ?? Calendar.current.component(.day, from: goal.createdAt ?? Date())
            if let selectedTime = selectedTime {
                dateComponents.hour = Calendar.current.component(.hour, from: selectedTime)
                dateComponents.minute = Calendar.current.component(.minute, from: selectedTime)
            } else {
                dateComponents.hour = 9
                dateComponents.minute = 0
            }
        default:
            return
        }
        
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: "goal_reminder_\(goal.id)", content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    func removePersonalGoalReminder(goalId: Int) {
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: ["goal_reminder_\(goalId)"])
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Ü–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ
    private func hasGoalBeenFundedThisPeriod(goal: Goal) -> Bool {
        guard let planPeriod = goal.planPeriod,
              let planAmount = goal.planAmount,
              let createdAt = goal.createdAt else { 
            return false 
        }
        
        let calendar = Calendar.current
        let now = Date()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        let currentPeriodNumber: Int
        if planPeriod == .week {
            let weeksSinceCreation = calendar.dateComponents([.weekOfYear], from: createdAt, to: now).weekOfYear ?? 0
            currentPeriodNumber = weeksSinceCreation
        } else {
            let monthsSinceCreation = calendar.dateComponents([.month], from: createdAt, to: now).month ?? 0
            currentPeriodNumber = monthsSinceCreation
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        let lastFundedKey = "goal_last_funded_\(goal.id)"
        let periodKey = "goal_current_period_\(goal.id)"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ –ø–µ—Ä–∏–æ–¥
        if let savedPeriod = UserDefaults.standard.object(forKey: periodKey) as? Int, savedPeriod == currentPeriodNumber {
            let hasBeenFunded = UserDefaults.standard.object(forKey: lastFundedKey) as? Date != nil
            print("DEBUG: –¶–µ–ª—å \(goal.name) - –ø–µ—Ä–∏–æ–¥ \(currentPeriodNumber), –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ: \(hasBeenFunded)")
            return hasBeenFunded
        }
        
        print("DEBUG: –¶–µ–ª—å \(goal.name) - –ø–µ—Ä–∏–æ–¥ \(currentPeriodNumber), –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ")
        return false
    }
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ü–µ–ª—å –±—ã–ª–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞
    func markGoalAsFunded(goalId: Int) {
        let lastFundedKey = "goal_last_funded_\(goalId)"
        UserDefaults.standard.set(Date(), forKey: lastFundedKey)
        print("DEBUG: –¶–µ–ª—å \(goalId) –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
    }
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ü–µ–ª—å –±—ã–ª–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
    func markGoalAsFunded(goal: Goal, amount: Double) {
        guard let planPeriod = goal.planPeriod,
              let createdAt = goal.createdAt else {
            print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ \(goal.name) –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        }
        
        let lastFundedKey = "goal_last_funded_\(goal.id)"
        let amountKey = "goal_funded_amount_\(goal.id)"
        let periodKey = "goal_current_period_\(goal.id)"
        
        let now = Date()
        UserDefaults.standard.set(now, forKey: lastFundedKey)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        let calendar = Calendar.current
        let currentPeriodNumber: Int
        if planPeriod == .week {
            let weeksSinceCreation = calendar.dateComponents([.weekOfYear], from: createdAt, to: now).weekOfYear ?? 0
            currentPeriodNumber = weeksSinceCreation
        } else {
            let monthsSinceCreation = calendar.dateComponents([.month], from: createdAt, to: now).month ?? 0
            currentPeriodNumber = monthsSinceCreation
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ –ø–µ—Ä–∏–æ–¥
        if let savedPeriod = UserDefaults.standard.object(forKey: periodKey) as? Int, savedPeriod == currentPeriodNumber {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—É–º–º–µ
            let currentAmount = UserDefaults.standard.double(forKey: amountKey)
            UserDefaults.standard.set(currentAmount + amount, forKey: amountKey)
        } else {
            // –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è
            UserDefaults.standard.set(amount, forKey: amountKey)
            UserDefaults.standard.set(currentPeriodNumber, forKey: periodKey)
        }
        
        print("DEBUG: –¶–µ–ª—å \(goal.name) –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ \(amount)‚Ç∏ –≤ –ø–µ—Ä–∏–æ–¥–µ \(currentPeriodNumber)")
    }
    

    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —Ü–µ–ª—å –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ
    private func hasGoalBeenFundedForAmount(goal: Goal, requiredAmount: Double) -> Bool {
        guard let planPeriod = goal.planPeriod,
              let planAmount = goal.planAmount,
              let createdAt = goal.createdAt else { 
            return false 
        }
        
        let calendar = Calendar.current
        let now = Date()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        let currentPeriodNumber: Int
        if planPeriod == .week {
            let weeksSinceCreation = calendar.dateComponents([.weekOfYear], from: createdAt, to: now).weekOfYear ?? 0
            currentPeriodNumber = weeksSinceCreation
        } else {
            let monthsSinceCreation = calendar.dateComponents([.month], from: createdAt, to: now).month ?? 0
            currentPeriodNumber = monthsSinceCreation
        }
        
        let amountKey = "goal_funded_amount_\(goal.id)"
        let periodKey = "goal_current_period_\(goal.id)"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ –ø–µ—Ä–∏–æ–¥
        if let savedPeriod = UserDefaults.standard.object(forKey: periodKey) as? Int, savedPeriod == currentPeriodNumber {
            let fundedAmount = UserDefaults.standard.double(forKey: amountKey)
            print("DEBUG: –¶–µ–ª—å \(goal.name) - –ø–µ—Ä–∏–æ–¥ \(currentPeriodNumber), –ø–æ–ø–æ–ª–Ω–µ–Ω–æ \(fundedAmount)‚Ç∏, –Ω—É–∂–Ω–æ \(requiredAmount)‚Ç∏")
            return fundedAmount >= requiredAmount
        }
        
        return false
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ
    private func calculateRemainingAmount(goal: Goal) -> Int {
        guard let planPeriod = goal.planPeriod,
              let planAmount = goal.planAmount,
              let createdAt = goal.createdAt else { 
            return 0 
        }
        
        let calendar = Calendar.current
        let now = Date()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        let currentPeriodNumber: Int
        if planPeriod == .week {
            let weeksSinceCreation = calendar.dateComponents([.weekOfYear], from: createdAt, to: now).weekOfYear ?? 0
            currentPeriodNumber = weeksSinceCreation
        } else {
            let monthsSinceCreation = calendar.dateComponents([.month], from: createdAt, to: now).month ?? 0
            currentPeriodNumber = monthsSinceCreation
        }
        
        print("DEBUG: –¶–µ–ª—å \(goal.name) - —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ \(currentPeriodNumber)")
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–æ –∫ —Ç–µ–∫—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
        let expectedAmount = Double(currentPeriodNumber + 1) * planAmount
        print("DEBUG: –¶–µ–ª—å \(goal.name) - –æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –∫ –ø–µ—Ä–∏–æ–¥—É \(currentPeriodNumber + 1): \(expectedAmount)‚Ç∏")
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ
        let currentAmount = goal.current_amount
        print("DEBUG: –¶–µ–ª—å \(goal.name) - —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞: \(currentAmount)‚Ç∏")
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        let remainingAmount = max(0, expectedAmount - currentAmount)
        print("DEBUG: –¶–µ–ª—å \(goal.name) - –æ—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞: \(remainingAmount)‚Ç∏")
        
        return Int(remainingAmount)
    }
    
    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–µ–π ---
    func checkGoalCompletion(goals: [Goal]) {
        for goal in goals {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
            if goal.current_amount >= goal.target_amount {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏
                let completionKey = "goal_completed_\(goal.id)"
                let hasBeenNotified = UserDefaults.standard.bool(forKey: completionKey)
                
                if !hasBeenNotified {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                    sendGoalCompletionNotification(goal: goal)
                    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    UserDefaults.standard.set(true, forKey: completionKey)
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏
                    removePersonalGoalReminder(goalId: goal.id)
                }
            } else {
                // –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                let completionKey = "goal_completed_\(goal.id)"
                UserDefaults.standard.set(false, forKey: completionKey)
            }
        }
    }
    
    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–µ–ª–∏ ---
    private func sendGoalCompletionNotification(goal: Goal) {
        guard isSystemNotificationsEnabled else { return }
        
        let content = UNMutableNotificationContent()
        content.title = "üéâ –¶–µ–ª—å '\(goal.name)' –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
        content.body = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ \(Int(goal.target_amount))‚Ç∏! üéä"
        content.sound = .default
        content.userInfo = [
            "goalId": goal.id,
            "goalName": goal.name,
            "action": "goal_completed"
        ]
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        let request = UNNotificationRequest(
            identifier: "goal_completion_\(goal.id)_\(Date().timeIntervalSince1970)",
            content: content,
            trigger: trigger
        )
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("Error scheduling goal completion notification: \(error)")
            } else {
                print("Goal completion notification scheduled for goal: \(goal.name)")
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏)
        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
            if AppRatingManager.shared.shouldShowRatingRequest() {
                AppRatingManager.shared.requestAppRating()
            }
        }
    }
    
    // --- –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏ (–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–ª–∏ —Å–±—Ä–æ—Å–µ) ---
    func resetGoalCompletionFlag(goalId: Int) {
        let completionKey = "goal_completed_\(goalId)"
        UserDefaults.standard.removeObject(forKey: completionKey)
    }
}
