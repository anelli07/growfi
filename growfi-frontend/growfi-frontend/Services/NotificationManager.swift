import Foundation
import UserNotifications
import SwiftUI

enum NotificationType: String, CaseIterable {
    case dailyReminder = "daily_reminder"
    case noActivity = "no_activity"
    case weeklySummary = "weekly_summary"
    
    var title: String {
        switch self {
        case .dailyReminder: return "GrowFi –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç"
        case .noActivity: return "–°–∫—É—á–∞–µ–º –ø–æ —Ç–µ–±–µ"
        case .weeklySummary: return "–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"
        }
    }
    
    var body: String {
        switch self {
        case .dailyReminder: return "–ù–µ –∑–∞–±—É–¥—å –≤–Ω–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã ‚Äî —è –∂–¥—É üìí"
        case .noActivity: return "–Ø —Å–∫—É—á–∞—é –ø–æ —Ç–≤–æ–∏–º —Ñ–∏–Ω–∞–Ω—Å–∞–º‚Ä¶ –≤–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å üò¢"
        case .weeklySummary: return "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ç—ã –≤—ã—Ä–æ—Å –∑–∞ –Ω–µ–¥–µ–ª—é üìä"
        }
    }
}

class NotificationManager: ObservableObject {
    static let shared = NotificationManager()
    
    @Published var isAuthorized = false
    
    var isSystemNotificationsEnabled: Bool {
        get { UserDefaults.standard.object(forKey: "isSystemNotificationsEnabled") as? Bool ?? true }
        set { UserDefaults.standard.set(newValue, forKey: "isSystemNotificationsEnabled") }
    }
    
    private init() {
        checkAuthorizationStatus()
    }
    
    func requestAuthorization() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            DispatchQueue.main.async {
                self.isAuthorized = granted
            }
        }
    }
    
    func checkAuthorizationStatus() {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                self.isAuthorized = settings.authorizationStatus == .authorized
            }
        }
    }
    
    // --- –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    // 1. Daily reminder (–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π)
    func scheduleDailyReminderIfNeeded(transactions: [Transaction]) {
        guard isSystemNotificationsEnabled else { return }
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        let hasToday = transactions.contains { calendar.isDate($0.date, inSameDayAs: today) }
        removeSystemNotification(type: .dailyReminder)
        guard !hasToday else { return }
        let content = UNMutableNotificationContent()
        content.title = NotificationType.dailyReminder.title
        content.body = NotificationType.dailyReminder.body
        content.sound = .default
        var dateComponents = DateComponents()
        dateComponents.hour = 20 // 20:00
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: NotificationType.dailyReminder.rawValue, content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    // 2. No activity (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π 7 –¥–Ω–µ–π)
    func scheduleNoActivityReminder(transactions: [Transaction]) {
        guard isSystemNotificationsEnabled else { return }
        let calendar = Calendar.current
        let weekAgo = calendar.date(byAdding: .day, value: -7, to: Date())!
        let hasRecent = transactions.contains { $0.date >= weekAgo }
        removeSystemNotification(type: .noActivity)
        guard !hasRecent else { return }
        let content = UNMutableNotificationContent()
        content.title = NotificationType.noActivity.title
        content.body = NotificationType.noActivity.body
        content.sound = .default
        var dateComponents = DateComponents()
        dateComponents.hour = 18 // 18:00
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)
        let request = UNNotificationRequest(identifier: NotificationType.noActivity.rawValue, content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    // 3. Weekly summary (–µ—Å–ª–∏ –±—ã–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é)
    func scheduleWeeklySummaryReminder(transactions: [Transaction]) {
        guard isSystemNotificationsEnabled else { return }
        let calendar = Calendar.current
        let weekAgo = calendar.date(byAdding: .day, value: -7, to: Date())!
        let hasWeekOps = transactions.contains { $0.date >= weekAgo }
        removeSystemNotification(type: .weeklySummary)
        guard hasWeekOps else { return }
        let content = UNMutableNotificationContent()
        content.title = NotificationType.weeklySummary.title
        content.body = NotificationType.weeklySummary.body
        content.sound = .default
        content.userInfo = ["openAnalytics": true]
        var dateComponents = DateComponents()
        dateComponents.weekday = 1 // Sunday
        dateComponents.hour = 15 // 15:00
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: NotificationType.weeklySummary.rawValue, content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func removeSystemNotification(type: NotificationType) {
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [type.rawValue])
    }
    
    // --- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ü–µ–ª—è–º ---
    func schedulePersonalGoalReminder(goal: Goal) {
        removePersonalGoalReminder(goalId: goal.id)
        guard let reminderPeriod = goal.reminderPeriod else { return } // –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º
        
        let content = UNMutableNotificationContent()
        content.title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ü–µ–ª–∏"
        let amount = Int(goal.planAmount ?? 0)
        content.body = "–ü–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å '\(goal.name)' –Ω–∞ \(amount)‚Ç∏!"
        content.sound = .default
        
        var dateComponents = DateComponents()
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        var selectedTime: Date? = nil
        if let timeString = goal.selectedTime {
            let formatter = DateFormatter()
            formatter.dateFormat = "HH:mm"
            selectedTime = formatter.date(from: timeString)
        }
        
        switch reminderPeriod {
        case "week":
            dateComponents.weekday = goal.selectedWeekday ?? 2
            if let selectedTime = selectedTime {
                dateComponents.hour = Calendar.current.component(.hour, from: selectedTime)
                dateComponents.minute = Calendar.current.component(.minute, from: selectedTime)
            } else {
                dateComponents.hour = 9
                dateComponents.minute = 0
            }
        case "month":
            dateComponents.day = goal.selectedMonthDay ?? Calendar.current.component(.day, from: goal.createdAt ?? Date())
            if let selectedTime = selectedTime {
                dateComponents.hour = Calendar.current.component(.hour, from: selectedTime)
                dateComponents.minute = Calendar.current.component(.minute, from: selectedTime)
            } else {
                dateComponents.hour = 9
                dateComponents.minute = 0
            }
        default:
            return
        }
        
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: "goal_reminder_\(goal.id)", content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }
    func removePersonalGoalReminder(goalId: Int) {
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: ["goal_reminder_\(goalId)"])
    }
}
